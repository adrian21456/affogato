<?php
use App\Models\User;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Laravel\Sanctum\Sanctum;
use PHPUnit\Framework\Assert;

uses(RefreshDatabase::class);

beforeEach(function () {
    $this->seed();
    $this->user = User::factory()->create([
        env('TEST_USER_FIELD', 'email') => env('TEST_USER_FIELD_VALUE', 'admin@gmail.com'),
    ]);

    Sanctum::actingAs($this->user);

    $this->payload = \App\Models\Demo::factory()->make()->toArray();

    $response = test()->postJson('/api/demo', test()->payload)->json();
    test()->pk_value = $response['result']['demo_id'];
});

it('can create demo', function () {
    expect(test()->pk_value)->toBeInt();
});

it('can list demo', function () {
    $start = microtime(true);

    $this->getJson('/api/demo')
        ->assertOk()
        ->assertJsonFragment(['demo_id' => test()->pk_value]);

    assertDurationLessThan($start, 'List');
});

it('can search demo', function () {
    $start = microtime(true);

    // Adjust if your search API differs
    $this->postJson('/api/demo/search', $this->payload)
        ->assertOk()
        ->assertJsonFragment($this->payload);

    assertDurationLessThan($start, 'Search');
});

it('can update demo', function () {

    $enums = (new \App\Models\Demo)->enumerable;

    foreach ($this->payload as $key => $value) {
        if(is_string($value) && !array_key_exists($key, $enums)) {
            $value .= 'Updated .';
        }
        $updatedPayload[$key] = $value;
    }
    $start = microtime(true);

    $this->postJson("/api/demo/" . test()->pk_value, $updatedPayload)
        ->assertOk()
        ->assertJsonFragment($updatedPayload);

    assertDurationLessThan($start, 'Update');
});

it('can delete demo', function () {
    $start = microtime(true);

    $this->deleteJson("/api/demo/" . test()->pk_value)
        ->assertOk();

    assertDurationLessThan($start, 'Delete');

    $this->getJson('/api/demo')
        ->assertOk()
        ->assertJsonMissing(['demo_id' => test()->pk_value]);
});
